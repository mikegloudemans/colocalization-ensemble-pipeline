#!/bin/python3

import sys
import os
import glob

#configfile:
	#"colocalization-config.json"
	#"whr-test-config.json"
#	"ir-config.json"

# change working directory
os.chdir(config['outdir'])
# make outdir and tmpdir 
subprocess.call('mkdir -p log/cluster', shell=True)
subprocess.call('mkdir -p {}'.format(config['tmpdir']), shell=True)

#########################################################################

snakefile = srcdir(".")

# define colocalization methods
methods = [k for k in config['colocalization_methods']]

def get_trait_set(set_number):
	trait_set = set()
	for trait in config['studies']:
		if 'trait_set' not in config['studies'][trait]:
			continue
		if config['studies'][trait]['trait_set'] == set_number:
			trait_set.add(trait)
	return(trait_set)

# assume there are two sets of traits for now
# all studies in trait_set_1 are tested against all studies in trait_set_2
# we should probably also add the option to provide a two-column input of all desired trait comparisons

trait_set_1 = get_trait_set(1)
trait_set_2 = get_trait_set(2)
studies = list(chain(*[list(trait_set_1), list(trait_set_2)]))

# What do we assume N to be if the value is not specified? Set to None to
# require N specified no matter what
default_N = 1000

# What do we assume s (case fraction) to be if the value is not specified? Set to None to
# require s specified no matter what
default_case_fraction = 0.5

# don't let wildcards contain directory
wildcard_constraints:
    study="[^/]*",
    trait1="[^/]*",
    trait2="[^/]*",
    method="[^/]*"


# make dictionary of all traits to file paths 
trait_to_raw_file = {}
for trait in studies:
	trait_to_raw_file[trait] = config['studies'][trait]['file']

if len(trait_set_1) == 0 or len(trait_set_2) == 0:
	sys.exit('Two sets of traits were not defined in the config file. (more detail...)')


# rules that can be run on the login node
localrules: all,stage

# here we define colocalization methods and trait combinations 
rule all:
	input:
		expand('{method}/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.METHOD-{method}.CHR-{chrom}.results.txt', 
			trait1 = trait_set_1, 
			trait2 = trait_set_2,
			method = methods,
			chrom = range(1,23)),
		expand('preprocess/{study}.formatted.summary_stats.txt.gz',
			study = studies)
rule all_overlap:
	input:
		expand('overlap/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.overlap.txt', 
			trait1 = trait_set_1, 
			trait2 = trait_set_2),
		expand('preprocess/{study}.formatted.summary_stats.txt.gz',
			study = studies)


rule stage:
	input:
		lambda wildcards: trait_to_raw_file[wildcards.study]
	output:
		'summary_stats/{study}.raw.summary_stats.txt.gz'
	shell:
		'''
		ln -s {input} {output}
		ln -s {input}.tbi {output}.tbi
		'''

rule preprocess:
	input:
		'summary_stats/{study}.raw.summary_stats.txt.gz'
	output:
		'preprocess/{study}.formatted.summary_stats.txt.gz'
	shell:
		'''
		# Dummy code until we actually write the preprocess rule;
		# Right now I'm just using stuff that's already been preprocessed.
		ln -s ../summary_stats/{wildcards.study}.raw.summary_stats.txt.gz preprocess/{wildcards.study}.formatted.summary_stats.txt.gz
		ln -s ../summary_stats/{wildcards.study}.raw.summary_stats.txt.gz.tbi preprocess/{wildcards.study}.formatted.summary_stats.txt.gz.tbi
		'''

rule get_gwas_hits:
	input:
		'preprocess/{trait1}.formatted.summary_stats.txt.gz'
	output:
		'gwas_top_hits/{trait1}.hits.txt'
	params:
		pvalue_threshold = config["overlap_settings"]["selection_thresholds"]["gwas"],
		window = config["overlap_settings"]["selection_separation_window"],
		snakefile = snakefile

	shell:
		'python {params.snakefile}/../scripts/overlap/get_gwas_hits.py {input} {output} {params.pvalue_threshold} {params.window}'

rule overlap:
	input:
		trait1 = 'gwas_top_hits/{trait1}.hits.txt',
		trait2 = 'preprocess/{trait2}.formatted.summary_stats.txt.gz'
	output:
		'overlap/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.CHR-{chrom}.overlap.txt'
	params:
		snakefile = snakefile,
		pvalue_threshold = config["overlap_settings"]["selection_thresholds"]["eqtl"],	
		window = config["overlap_settings"]["overlap_window"]

	shell:
		'python {params.snakefile}/../scripts/overlap/list_snps_to_test.py {input.trait1} {input.trait2} {output} {params.pvalue_threshold} {params.window} {wildcards.chrom}'

rule process_loci:
	input:
		'overlap/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.CHR-{chrom}.overlap.txt'
	output:
		'process_loci/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.CHR-{chrom}.checkpoint.txt'
	params:
		snakefile = snakefile,
		trait1_file = lambda x: config["studies"][x.trait1]["file"],
		trait2_file = lambda x: config["studies"][x.trait2]["file"],
		window = config["colocalization_settings"]["window"],
		ref_file_1 = lambda x: config["ref_genomes"][config["studies"][x.trait1]["ref_genome"]]["file"].replace("{chrom}", "${chrom}"),
		ref_file_2 = lambda x: config["ref_genomes"][config["studies"][x.trait2]["ref_genome"]]["file"].replace("{chrom}", "${chrom}")
	shell:
		'''
		# preprocess each locus and output merged data to file with predictable name
		# we aren't actually going to tell snakemake about this directory 
		mkdir -p process_loci/{wildcards.trait1}/{wildcards.trait2}/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}.CHR-{wildcards.chrom}

		i=0
		tail -n +2 {input} | while read chrom pos trait1_pvalue feature1 trait2_pvalue feature2; do
			let i=i+1
			# each file in this directory should be the merged summary stats for a locus
			# here we just touch a dummy file

			python {params.snakefile}/../scripts/process_loci/preprocess.py process_loci/{wildcards.trait1}/{wildcards.trait2}/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}.CHR-{wildcards.chrom}/locus.${{i}}.txt {params.window} {params.trait1_file} {params.trait2_file} ${{chrom}} ${{pos}} ${{feature1}} ${{feature2}} {params.ref_file_1} {params.ref_file_2}
		done 

		# when done:
		echo '{wildcards.trait1} {wildcards.trait2}' > {output}
		'''


rule coloc:
	input:
		'process_loci/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.CHR-{chrom}.checkpoint.txt'
	output:
		'coloc/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.METHOD-{method}.CHR-{chrom}.results.txt'
	params: 
		snakefile = snakefile,
		type_trait1 = lambda x: 
			config["studies"][x.trait1]["trait_type"] if "trait_type" in config["studies"][x.trait1] else "quant",
		type_trait2 = lambda x:
			config["studies"][x.trait2]["trait_type"] if "trait_type" in config["studies"][x.trait2] else "quant",
		N_trait1 =  lambda x:
			config["studies"][x.trait1]["N"] if "N" in config["studies"][x.trait1] else default_N,
		N_trait2 = lambda x:
			config["studies"][x.trait2]["N"] if "N" in config["studies"][x.trait2] else default_N,
		s_trait1 = lambda x:
			config["case_fraction"][x.trait1]["N"] if "N" in config["studies"][x.trait1] else default_case_fraction,
		s_trait2 = lambda x:
			config["case_fraction"][x.trait2]["N"] if "N" in config["studies"][x.trait2] else default_case_fraction
	shell:
		'''
		echo "chr\tpos\tfile_trait1\tfile_trait2\tpvalue_trait1\tpvalue_trait2\tfeature1\tfeature2\tN_snps\tCOLOC_h0\tCOLOC_h1\tCOLOC_h2\tCOLOC_h3\tCOLOC_h4" > {output}

		# do something for each file in processed_loci/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}/
		for locus in $(ls process_loci/{wildcards.trait1}/{wildcards.trait2}/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}.CHR-{wildcards.chrom}/*); do
			python {params.snakefile}/../scripts/methods/coloc/coloc.py ${{locus}} {params.N_trait1} {params.s_trait1} {params.type_trait1} {params.N_trait2} {params.s_trait2} {params.type_trait2} {output} {params.snakefile}
		done
		'''


rule finemap:
	input:
		'process_loci/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.CHR-{chrom}.checkpoint.txt'
	output:
		'finemap/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.METHOD-{method}.CHR-{chrom}.results.txt'
	params:
		snakefile = snakefile,
		trait1_vcf = lambda x:
			config["ref_genomes"][config["studies"][x.trait1]["ref_genome"]]["file"],
		trait2_vcf = lambda x:
			config["ref_genomes"][config["studies"][x.trait2]["ref_genome"]]["file"],
		outdir = lambda x:
			f'finemap/{x.trait1}/{x.trait2}',
		tmpdir = lambda x:
			f'{config["tmpdir"]}/{x.trait1}/{x.trait2}',
		N_trait1 =  lambda x:
			config["studies"][x.trait1]["N"] if "N" in config["studies"][x.trait1] else default_N,
		N_trait2 = lambda x:
			config["studies"][x.trait2]["N"] if "N" in config["studies"][x.trait2] else default_N,
		window = config["colocalization_settings"]["window"],
		verbose = lambda x: 
			config["colocalization_settings"]["verbose"] if "verbose" in config["colocalization_settings"] else False,
		save_finemap_threshold = lambda x: 
			config["colocalization_settings"]["save_finemap_threshold"] if "save_finemap_threshold" in config["colocalization_settings"] else -1,
		max_causal = lambda x: 
			config["colocalization_settings"]["max_causal"] if "max_causal" in config["colocalization_settings"] else 1
	shell:
		'''
		# Write header
		echo "chr\tpos\tfile_trait1\tfile_trait2\tpvalue_trait1\tpvalue_trait2\tfeature1\tfeature2\tN_snps\tfinemap_clpp\tfinemap_clpp_mod" > {output}

		for locus in $(ls process_loci/{wildcards.trait1}/{wildcards.trait2}/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}.CHR-{wildcards.chrom}/*); do
			python {params.snakefile}/../scripts/methods/finemap/finemap.py ${{locus}} {params.outdir} {output} {params.tmpdir} {params.trait1_vcf} {params.trait2_vcf} {params.window} {params.N_trait1} {params.N_trait2} {params.max_causal} {params.verbose} {params.save_finemap_threshold} {params.snakefile}
		done

		# Then remove tmp files for all of them
		rm -rf {params.tmpdir}
		'''

rule smr:
	input:
		'process_loci/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.CHR-{chrom}.checkpoint.txt'
	output:
		'smr/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.METHOD-{method}.CHR-{chrom}.results.txt'
	params:
		snakefile = snakefile,
		trait1_vcf = lambda x:
			config["ref_genomes"][config["studies"][x.trait1]["ref_genome"]]["file"],
		tmpdir = lambda x:
			f'{config["tmpdir"]}/{x.trait1}/{x.trait2}/chr-{x.chrom}',
		window = config["colocalization_settings"]["window"],
		verbose = lambda x: 
			config["colocalization_settings"]["verbose"] if "verbose" in config["colocalization_settings"] else False
	shell:
		'''
		# Write header
		echo "chr\tpos\tfile_trait1\tfile_trait2\tpvalue_trait1\tpvalue_trait2\tfeature1\tfeature2\tN_snps\tsmr_pval\tsmr_heidi_pval" > {output}

		for locus in $(ls process_loci/{wildcards.trait1}/{wildcards.trait2}/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}.CHR-{wildcards.chrom}/*); do
			python {params.snakefile}/../scripts/methods/smr/smr.py ${{locus}} {output} {params.tmpdir} {params.trait1_vcf} {params.window} {params.verbose}
		done

		# Then remove tmp files for all of them
		#rm -rf {params.tmpdir}
		'''


rule baseline:
	input:
		'process_loci/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.CHR-{chrom}.checkpoint.txt'
	output:
		'baseline/{trait1}/{trait2}/TRAIT1-{trait1}.TRAIT2-{trait2}.METHOD-{method}.CHR-{chrom}.results.txt'
	params:
		snakefile = snakefile
	shell:
		'''
		# Write header
		echo "chr\tpos\tfile_trait1\tfile_trait2\tpvalue_trait1\tpvalue_trait2\tfeature1\tfeature2\tN_snps\tbaseline1\tbaseline2\tbaseline3\tbaseline4\n" > {output}

		for locus in $(ls process_loci/{wildcards.trait1}/{wildcards.trait2}/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}.CHR-{wildcards.chrom}/*); do
			python {params.snakefile}/../scripts/methods/baseline/baseline.py ${{locus}} {output} 
		done
		'''


