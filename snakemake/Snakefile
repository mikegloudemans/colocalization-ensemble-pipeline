#!/bin/python3

import sys
import os
import glob

configfile:
	"colocalization-config.json"

# change working directory
os.chdir(config['outdir'])
# make outdir and tmpdir 
subprocess.call('mkdir -p log/cluster', shell=True)
subprocess.call('mkdir -p {}'.format(config['tmpdir']), shell=True)

#########################################################################

# define colocalization methods
methods = [k for k in config['colocalization_methods']]

def get_trait_set(set_number):
	trait_set = set()
	for trait in config['studies']:
		if 'trait_set' not in config['studies'][trait]:
			continue
		if config['studies'][trait]['trait_set'] == set_number:
			trait_set.add(trait)
	return(trait_set)

# assume there are two sets of traits for now
# all studies in trait_set_1 are tested against all studies in trait_set_2
# we should probably also add the option to provide a two-column input of all desired trait comparisons

trait_set_1 = get_trait_set(1)
trait_set_2 = get_trait_set(2)
studies = list(chain(*[list(trait_set_1), list(trait_set_2)]))

# don't let wildcards contain directory
wildcard_constraints:
    study="[^/]*",
    trait1="[^/]*",
    trait2="[^/]*",
    method="[^/]*"


# make dictionary of all traits to file paths 
trait_to_raw_file = {}
for trait in studies:
	trait_to_raw_file[trait] = config['studies'][trait]['file']

if len(trait_set_1) == 0 or len(trait_set_2) == 0:
	sys.exit('Two sets of traits were not defined in the config file. (more detail...)')


# rules that can be run on the login node
localrules: all,stage

# here we define colocalization methods and trait combinations 
rule all:
	input:
		expand('results/{method}/TRAIT1-{trait1}.TRAIT2-{trait2}.METHOD-{method}.results.txt', 
			trait1 = trait_set_1, 
			trait2 = trait_set_2,
			method = methods),
		expand('preprocess/{study}.formatted.summary_stats.txt.gz',
			study = studies)

'''
rule get_gwas_hits:
	input:
		'output/summary_stats/{trait1}.formatted.summary_stats.txt.gz'
	output:
		'output/gwas_top_hits/{trait1}.hits.txt'
	params:
		pvalue_threshold = config["loci_selection_settings"]["selection_thresholds"]["gwas"],
		window = config["loci_selection_settings"]["selection_independence_window"]

	shell:
		'python scripts/overlap/get_gwas_hits.py {input} {output} {params.pvalue_threshold} {params.window}'
 
rule overlap:
	input:
		trait1 = 'output/gwas_top_hits/{trait1}.hits.txt',
		trait2 = 'output/summary_stats/{trait2}.formatted.summary_stats.txt.gz'
	output:
		'output/overlap/{trait1}.{trait2}.loci_to_test.txt'
	params:
		pvalue_threshold = config["loci_selection_settings"]["selection_thresholds"]["eqtl"],	
		window = config["loci_selection_settings"]["lookup_window"]

	shell:
		'python scripts/overlap/list_snps_to_test.py {input.trait1} {input.trait2} {output} {params.pvalue_threshold} {params.window}'
'''

rule stage:
	input:
		lambda wildcards: trait_to_raw_file[wildcards.study]
	output:
		'summary_stats/{study}.raw.summary_stats.txt.gz'
	shell:
		'''
		ln -s {input} {output}
		'''

rule preprocess:
	input:
		'summary_stats/{study}.raw.summary_stats.txt.gz'
	output:
		'preprocess/{study}.formatted.summary_stats.txt.gz'
	shell:
		'''
		touch {output}
		'''

rule overlap:
	input:
		trait1 = 'preprocess/{trait1}.formatted.summary_stats.txt.gz',
		trait2 = 'preprocess/{trait2}.formatted.summary_stats.txt.gz'
	output:
		'overlap/TRAIT1-{trait1}.TRAIT2-{trait2}.overlap.txt'
	shell:
		'''
		rand=$((1 + $RANDOM % 100)) # random number 1-100
		for i in $(seq 1 $rand); do 
			echo ${{i}} >> {output}
		done
 		'''

rule process_loci:
	input:
		'overlap/TRAIT1-{trait1}.TRAIT2-{trait2}.overlap.txt'
	output:
		'processed_loci/TRAIT1-{trait1}.TRAIT2-{trait2}.checkpoint.txt'
	shell:
		'''
		# preprocess each locus and output merged data to file with predictable name
		# we aren't actually going to tell snakemake about this directory 
		mkdir -p processed_loci/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}

		while read i; do
			# for this dummy case, each line is a number
			# for the real case, each file in this directory should be the merged summary stats for a locus
			touch processed_loci/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}/locus.${{i}}.txt 
		done < {input}

		# when done:
		echo '{wildcards.trait1} {wildcards.trait2}' > {output}
		'''


rule coloc:
	input:
		'processed_loci/TRAIT1-{trait1}.TRAIT2-{trait2}.checkpoint.txt'
	output:
		'results/coloc/TRAIT1-{trait1}.TRAIT2-{trait2}.METHOD-{method}.results.txt'
	params: 
	shell:
		'''
		# do something for each file in processed_loci/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}/
		for locus in $(ls processed_loci/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}/); do
			echo ${{locus}} >> {output}
		done
		'''


rule finemap:
	input:
		'processed_loci/TRAIT1-{trait1}.TRAIT2-{trait2}.checkpoint.txt'
	output:
		'results/finemap/TRAIT1-{trait1}.TRAIT2-{trait2}.METHOD-{method}.results.txt'
	params: 
	shell:
		'''
		# do something for each file in processed_loci/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}/
		for locus in $(ls processed_loci/TRAIT1-{wildcards.trait1}.TRAIT2-{wildcards.trait2}/); do
			echo ${{locus}} >> {output}
		done
		'''

